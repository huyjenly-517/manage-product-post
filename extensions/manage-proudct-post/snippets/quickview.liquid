<!-- Quickview App Extension Snippet -->
<!-- Simple and safe version that won't break site loading -->

<script>
  // Simple quickview functionality
  (function() {
    'use strict';

    // Default configuration - only used if API fails completely
    let quickviewConfig = {
      enabled: false, // Default to disabled for safety
      buttonText: "Quick View",
      position: 'below'
    };

    // Track if quickview is enabled
    let quickviewEnabled = false;

    // Track if quickview has been initialized
    let quickviewInitialized = false;

    // MutationObserver to watch for DOM changes
    let observer = null;

    // Load configuration from app using API call
    function loadConfig() {
      try {
        console.log('Loading config from app API');

        // Try to get the current app domain from the page
        const hardcodedDomain = 'https://start-tool-threat-freeware.trycloudflare.com/';
        const currentDomain = window.location.origin;

        // Try current domain first, then fallback
        const quickviewUrl = `${hardcodedDomain}/api/quickview/config`;
        console.log('Trying current domain:', quickviewUrl);
        callQuickviewAPI(quickviewUrl);

      } catch (error) {
        console.log('Quickview config error:', error);
        console.log('Using fallback config - enabling quickview');
      }
    }

    // Call the quickview API
    function callQuickviewAPI(appUrl, callback) {
      console.log('Calling API:', appUrl);

      fetch(appUrl, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
          // Removed Cache-Control header to avoid CORS issues
        }
      })
        .then(response => {
          console.log('API response status:', response.status);
          if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
          }
          return response.json();
        })
        .then(result => {
          console.log('API response:', result);

          if (result.success && result.config) {
            const oldEnabled = quickviewConfig.enabled;

            // Apply config from API
            quickviewConfig = { ...quickviewConfig, ...result.config };

            // If enabled state changed, force reinitialize

            if (oldEnabled !== quickviewConfig.enabled) {
              console.log('Enabled state changed, removing all buttons');
              removeAllButtons();
            }

            initQuickview();

            // Call callback with success
            if (callback) callback(true);
          } else {

            // Fallback to enabled config if API fails
            quickviewConfig.enabled = true;
            quickviewConfig.buttonText = "Quick View";
            quickviewConfig.position = 'below';

            // Call callback with failure
            if (callback) callback(false);
          }
        })
        .catch(error => {

          // Fallback to enabled config if API fails
          quickviewConfig.enabled = true;
          quickviewConfig.buttonText = "Quick View";
          quickviewConfig.position = 'below';
          console.log('Using fallback config due to API error - enabling quickview');
          initQuickview();

          // Call callback with failure
          if (callback) callback(false);
        });
    }

    // Create quickview button
    function createButton(element) {
      if (!quickviewConfig.enabled) return;

      // Check if button exists - more thorough check
      const existingButton = element.querySelector('.quickview-button');
      if (existingButton) {
        console.log('Button already exists in element, skipping');
        return;
      }

      // Check if this element or any of its parents already has quickview initialized
      const hasButtonInParent = element.closest('[data-quickview-initialized]');
      if (hasButtonInParent) {
        console.log('Parent already has quickview initialized, skipping');
        return;
      }

      // Check if this element already has the attribute
      if (element.hasAttribute('data-quickview-initialized')) {
        console.log('Element already marked as initialized, skipping');
        return;
      }

      // Mark this element as initialized
      element.setAttribute('data-quickview-initialized', 'true');

      let button; // Declare button variable

      // Try to find existing quick-add button to clone its style
      const existingQuickAddButton = element.querySelector('.quick-add__submit, .button--secondary, button[type="submit"]');

      if (existingQuickAddButton) {
        console.log('Found existing button to clone:', existingQuickAddButton);

        // Clone the existing button structure
        button = existingQuickAddButton.cloneNode(true);
        button.className = 'quickview-button ' + (existingQuickAddButton.className || '');
        button.type = 'button'; // Change from submit to button
        button.textContent = quickviewConfig.buttonText || 'Quick View';

        // Remove form-related attributes
        button.removeAttribute('name');
        button.removeAttribute('form');
        button.removeAttribute('aria-haspopup');
        button.removeAttribute('aria-labelledby');
        button.removeAttribute('data-product-url');

        // Remove loading spinner and other elements
        const spinner = button.querySelector('.loading-overlay__spinner');
        if (spinner) spinner.remove();

        // Add quickview-specific attributes
        button.setAttribute('data-quickview', 'true');

        // Add click handler
        const clickHandler = (e) => {
          e.preventDefault();
          e.stopPropagation();
          e.stopImmediatePropagation();

          console.log('Quickview button clicked!', e);
          openModal(element);

          return false;
        };

        button.addEventListener('click', clickHandler, true);
        button.addEventListener('mousedown', (e) => e.preventDefault());
        button.addEventListener('touchstart', clickHandler, true);

        console.log('Created quickview button by cloning:', button);

      } else {
        console.log('No existing button found, creating new one');

        // Fallback to creating new button
        button = document.createElement('button');
        button.className = 'quickview-button';
        button.type = 'button';
        button.textContent = quickviewConfig.buttonText || 'Quick View';

        // Set inline styles to ensure they work
        button.style.cssText = `
          background: #007bff !important;
          color: white !important;
          border: none !important;
          padding: 8px 16px !important;
          border-radius: 4px !important;
          cursor: pointer !important;
          font-size: 14px !important;
          font-weight: 500 !important;
          margin-top: 8px !important;
          width: 100% !important;
          transition: background-color 0.2s ease !important;
          font-family: inherit !important;
          display: block !important;
          text-align: center !important;
          text-decoration: none !important;
          pointer-events: auto !important;
          position: relative !important;
          z-index: 1000 !important;
          user-select: none !important;
        `;

        // Hover effects
        button.addEventListener('mouseenter', () => {
          button.style.background = '#0056b3 !important';
          button.style.cursor = 'pointer !important';
        });
        button.addEventListener('mouseleave', () => {
          button.style.background = '#007bff !important';
          button.style.cursor = 'pointer !important';
        });

        // Click handler
        const clickHandler = (e) => {
          e.preventDefault();
          e.stopPropagation();
          e.stopImmediatePropagation();

          console.log('Quickview button clicked!', e);
          openModal(element);

          return false;
        };

        button.addEventListener('click', clickHandler, true);
        button.addEventListener('mousedown', (e) => e.preventDefault());
        button.addEventListener('touchstart', clickHandler, true);

        console.log('Created fallback quickview button:', button);
      }

      // Ensure button is defined before positioning
      if (!button) {
        console.error('Button creation failed, cannot position');
        return;
      }

      // Position button
      const position = quickviewConfig.position || 'below';
      switch (position) {
        case 'above':
          element.insertBefore(button, element.firstChild);
          break;
        default:
          element.appendChild(button);
          break;
      }

      console.log('Quickview button positioned for element:', element);
    }

    // Open quickview modal
    function openModal(element) {
      try {

        // Store original overflow value
        const originalOverflow = document.body.style.overflow;
        console.log('Original overflow:', originalOverflow);

        // Close existing modal
        const existing = document.querySelector('.quickview-modal');
        if (existing) {
          console.log('Removing existing modal');
          existing.remove();
        }

        // Get product data
        const title = element.querySelector('h3, h4, .product-title')?.textContent?.trim() || 'Product';
        const price = element.querySelector('.price, .product-price')?.textContent?.trim() || '';
        const image = element.querySelector('img')?.src || '';
        const link = element.querySelector('a[href*="/products/"]')?.href || '';

        console.log('Product data found:', { title, price, image, link });

        // Create modal container
        const modal = document.createElement('div');
        modal.className = 'quickview-modal';
        modal.id = 'quickview-modal-' + Date.now();
        modal.style.cssText = `
          position: fixed !important;
          top: 0 !important;
          left: 0 !important;
          right: 0 !important;
          bottom: 0 !important;
          z-index: 999999 !important;
          background: rgba(0, 0, 0, 0.5) !important;
          display: flex !important;
          align-items: center !important;
          justify-content: center !important;
          font-family: inherit !important;
        `;

        // Create modal content
        const content = document.createElement('div');
        content.className = 'quickview-modal-content';
        content.style.cssText = `
          background: white !important;
          padding: 24px !important;
          max-width: 500px !important;
          max-height: 80vh !important;
          overflow: auto !important;
          border-radius: 8px !important;
          position: relative !important;
          box-shadow: 0 10px 25px rgba(0,0,0,0.2) !important;
          z-index: 1000000 !important;
        `;

        // Create close button
        const closeBtn = document.createElement('button');
        closeBtn.innerHTML = '×';
        closeBtn.className = 'quickview-close-btn';
        closeBtn.style.cssText = `
          position: absolute !important;
          top: 12px !important;
          right: 12px !important;
          background: none !important;
          border: none !important;
          font-size: 24px !important;
          cursor: pointer !important;
          color: #333 !important;
          width: 30px !important;
          height: 30px !important;
          display: flex !important;
          align-items: center !important;
          justify-content: center !important;
          z-index: 1000001 !important;
        `;

        // Function to close modal and restore scrolling
        const closeModal = () => {
          console.log('Closing modal and restoring overflow to:', originalOverflow);
          modal.remove();
          document.body.style.overflow = originalOverflow || '';
          document.removeEventListener('keydown', escapeHandler);
        };

        // Close button event
        closeBtn.onclick = (e) => {
          e.preventDefault();
          e.stopPropagation();
          console.log('Close button clicked');
          closeModal();
        };

        // Build content HTML
        let html = '';
        if (image) html += `<img src="${image}" style="max-width: 100%; margin-bottom: 16px; border-radius: 4px; display: block;">`;
        if (title) html += `<h3 style="margin: 0 0 16px 0; color: #333; font-size: 20px;">${title}</h3>`;
        if (price) html += `<div style="margin-bottom: 16px; font-size: 18px; font-weight: 600; color: #10b981;">${price}</div>`;
        if (link) html += `<a href="${link}" style="display: block; text-align: center; background: #10b981; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; font-weight: 500; margin-top: 16px;">View Product Details</a>`;

        content.innerHTML = html;
        content.appendChild(closeBtn);
        modal.appendChild(content);

        // Close on overlay click
        modal.onclick = (e) => {
          if (e.target === modal) {
            console.log('Overlay clicked, closing modal');
            closeModal();
          }
        };

        // Escape key handler
        const escapeHandler = (e) => {
          if (e.key === 'Escape') {
            console.log('Escape key pressed, closing modal');
            closeModal();
          }
        };
        document.addEventListener('keydown', escapeHandler);

        // Add modal to page
        console.log('Adding modal to page...');
        document.body.appendChild(modal);
        document.body.style.overflow = 'hidden';

        // Cleanup when modal is removed
        modal.addEventListener('remove', () => {
          console.log('Modal removed event triggered');
          document.body.style.overflow = originalOverflow || '';
          document.removeEventListener('keydown', escapeHandler);
        });

      } catch (error) {
        console.error('Error opening modal:', error);
        console.error('Error stack:', error.stack);
      }
    }

    // Force remove all quickview buttons
    function removeAllButtons() {
      try {
        const buttons = document.querySelectorAll('.quickview-button');
        buttons.forEach(btn => btn.remove());

        const markers = document.querySelectorAll('[data-quickview-initialized]');
        markers.forEach(el => el.removeAttribute('data-quickview-initialized'));

        console.log(`Removed ${buttons.length} quickview buttons and ${markers.length} markers`);
      } catch (error) {
        console.error('Error removing buttons:', error);
      }
    }

    // Initialize quickview
    function initQuickview() {
      try {
        console.log('Initializing quickview, enabled:', quickviewConfig.enabled);

        // Set global flag
        quickviewEnabled = quickviewConfig.enabled;

        // If already initialized and enabled, don't reinitialize
        if (quickviewInitialized && quickviewEnabled) {
          console.log('Quickview already initialized and enabled, skipping');
          return;
        }

        // Remove existing buttons and cleanup
        document.querySelectorAll('.quickview-button').forEach(btn => {
          btn.remove();
        });

        // Remove initialization markers
        document.querySelectorAll('[data-quickview-initialized]').forEach(el => {
          el.removeAttribute('data-quickview-initialized');
        });

        // If disabled, don't create any buttons
        if (!quickviewConfig.enabled) {
          console.log('Quickview is disabled, not creating buttons');
          if (observer) {
            observer.disconnect();
            observer = null;
          }
          quickviewInitialized = false;
          return;
        }


        // Find product elements - be more specific to avoid duplicates
        const selectors = [
          '.card__content:not([data-quickview-initialized])',
          '.card__information:not([data-quickview-initialized])',
          '.product-item:not([data-quickview-initialized])',
          '.grid-product:not([data-quickview-initialized])',
          '.product-card:not([data-quickview-initialized])',
          '.grid__item:not([data-quickview-initialized])',
          '.product-card-wrapper:not([data-quickview-initialized])'
        ];

        let totalButtons = 0;
        selectors.forEach(selector => {
          try {
            const elements = document.querySelectorAll(selector);
            console.log(`Found ${elements.length} elements for selector: ${selector}`);

            elements.forEach(element => {
              // Double check - element should not have button and not be initialized
              if (element &&
                !element.querySelector('.quickview-button') &&
                !element.hasAttribute('data-quickview-initialized') &&
                !element.closest('[data-quickview-initialized]')) {


                createButton(element);
                totalButtons++;
              } else {
                console.log('Skipping element (already has button or initialized):', element);
              }
            });
          } catch (error) {
            console.error('Error processing selector:', selector, error);
          }
        });

        // If no buttons were created, try a broader search
        if (totalButtons === 0) {
          console.log('No buttons created with specific selectors, trying broader search...');

          // Look for any elements that might be product containers
          const allElements = document.querySelectorAll('*');
          const potentialElements = Array.from(allElements).filter(el => {
            return el.classList && (
              el.classList.contains('card') ||
              el.classList.contains('product') ||
              el.classList.contains('item') ||
              el.classList.contains('grid') ||
              el.querySelector('img') ||
              el.querySelector('h3, h4, .product-title') ||
              el.querySelector('.price, .product-price')
            );
          });

          console.log('Found potential product elements:', potentialElements.length);

          potentialElements.forEach((element, index) => {
            if (index < 10) { // Limit to first 10 to avoid spam
              console.log(`Potential element ${index + 1}:`, element.className, element.tagName);
            }
          });
        }

        // Mark as initialized
        quickviewInitialized = true;

        console.log(`Quickview initialized with ${totalButtons} buttons`);
      } catch (error) {
        console.error('Error initializing quickview:', error);
      }
    }

    // Enable quickview immediately for testing
    function enableQuickviewImmediately() {
      console.log('Enabling quickview immediately for testing');
      quickviewConfig.enabled = true;
      quickviewConfig.buttonText = "Quick View";
      quickviewConfig.position = 'below';
      quickviewEnabled = true;

      // Force initialization
      removeAllButtons();

      console.log('Quickview enabled and initialized');
    }

    // Initialize quickview with theme config (called from app block)
    function initWithThemeConfig(themeConfig) {
      console.log('Initializing quickview with theme config:', themeConfig);

      // Apply theme config
      quickviewConfig = { ...quickviewConfig, ...themeConfig };
      quickviewEnabled = themeConfig.enabled;

      if (themeConfig.enabled) {
        // Remove any existing buttons first
        removeAllButtons();
        // Initialize with theme config
        initQuickview();
        console.log('Quickview initialized with theme config');
      } else {
        console.log('Quickview disabled by theme config');
      }
    }


    // Start when DOM is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', loadConfig);
    } else {
      loadConfig();
    }


    // Expose for debugging
    window.QuickviewApp = {
      init: initQuickview,
      initWithThemeConfig: initWithThemeConfig,
      config: () => quickviewConfig,
      removeAll: removeAllButtons,
      forceInit: () => {
        removeAllButtons();
        initQuickview();
      },
      reload: () => {
        console.log('Reloading quickview configuration');
        loadConfig();
      },
      enableNow: enableQuickviewImmediately,
      restoreScroll: () => {
        document.body.style.overflow = '';
        document.documentElement.style.overflow = '';
      },
      cleanup: () => {
        console.log('Cleaning up all quickview elements');
        // Remove all buttons
        document.querySelectorAll('.quickview-button').forEach(btn => btn.remove());
        // Remove all markers
        document.querySelectorAll('[data-quickview-initialized]').forEach(el => {
          el.removeAttribute('data-quickview-initialized');
        });
        // Reset flags
        quickviewInitialized = false;
        console.log('Cleanup complete, ready to reinitialize');
      }
    };
  })();
</script>

<style>
  .quickview-button {
    /* Inherit theme button styles */
    font-family: inherit !important;
    display: block !important;
    text-align: center !important;
    text-decoration: none !important;
    pointer-events: auto !important;
    position: relative !important;
    z-index: 1000 !important;
    user-select: none !important;
    cursor: pointer !important;

    /* Override specific styles if needed */
    background: var(--quickview-button-bg, #007bff) !important;
    color: var(--quickview-button-color, white) !important;
    border: var(--quickview-button-border, none) !important;
    padding: var(--quickview-button-padding, 8px 16px) !important;
    border-radius: var(--quickview-button-radius, 4px) !important;
    font-size: var(--quickview-button-font-size, 14px) !important;
    font-weight: var(--quickview-button-font-weight, 500) !important;
    margin-top: var(--quickview-button-margin-top, 8px) !important;
    width: var(--quickview-button-width, 100%) !important;
    transition: background-color 0.2s ease !important;
  }

  .quickview-button:hover {
    background: var(--quickview-button-hover-bg, #0056b3) !important;
    text-decoration: none !important;
    cursor: pointer !important;
  }

  .quickview-button:active {
    background: var(--quickview-button-active-bg, #004085) !important;
    transform: translateY(1px) !important;
  }

  .quickview-button:focus {
    outline: 2px solid var(--quickview-button-focus-color, #007bff) !important;
    outline-offset: 2px !important;
  }

  /* Ensure cloned buttons maintain theme styling */
  .quickview-button.button--secondary {
    background: var(--button--secondary-background, #007bff) !important;
    color: var(--button--secondary-text, white) !important;
    border: var(--button--secondary-border, 1px solid #007bff) !important;
  }

  .quickview-button.button--secondary:hover {
    background: var(--button--secondary-background-hover, #0056b3) !important;
    border-color: var(--button--secondary-border-hover, #0056b3) !important;
  }

  .quickview-modal {
    font-family: inherit !important;
    z-index: 999999 !important;
    position: fixed !important;
    top: 0 !important;
    left: 0 !important;
    right: 0 !important;
    bottom: 0 !important;
    background: rgba(0, 0, 0, 0.5) !important;
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
    pointer-events: auto !important;
    overflow: hidden !important;
  }

  .quickview-modal-content {
    background: white !important;
    padding: 24px !important;
    max-width: 500px !important;
    max-height: 80vh !important;
    overflow: auto !important;
    border-radius: 8px !important;
    position: relative !important;
    box-shadow: 0 10px 25px rgba(0,0,0,0.2) !important;
    z-index: 1000000 !important;
    pointer-events: auto !important;
    margin: 20px !important;
  }

  .quickview-close-btn {
    position: absolute !important;
    top: 12px !important;
    right: 12px !important;
    background: none !important;
    border: none !important;
    font-size: 24px !important;
    cursor: pointer !important;
    color: #333 !important;
    width: 30px !important;
    height: 30px !important;
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
    z-index: 1000001 !important;
    pointer-events: auto !important;
  }

  .quickview-close-btn:hover {
    color: #666 !important;
    cursor: pointer !important;
  }

  .quickview-close-btn:active {
    color: #999 !important;
  }
</style>
