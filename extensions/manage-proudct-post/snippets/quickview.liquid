<!-- Quickview App Extension Snippet -->
<!-- This snippet automatically loads the quickview functionality -->
<!-- Include this in your theme templates where you want quickview to work -->

<!-- Global functions for quickview - Must be defined first -->
<script>
  // Close quickview modal - Global scope
  function closeQuickviewModal() {
    const modal = document.querySelector('.quickview-modal');
    if (modal) {
      modal.remove();
      document.body.style.overflow = '';
    }
  }

  // Add to cart function - Global scope
  function addToCart(productHandle) {
    console.log('Adding to cart for product:', productHandle);

    // Get the first available variant
    const variantId = getFirstAvailableVariant(productHandle);

    if (!variantId) {
      alert('Product not available - cannot find variant ID');
      return;
    }

    if (variantId === 'NEED_FETCH') {
      // Redirect to product page where add to cart will work
      alert('Please go to the product page to add to cart. Redirecting...');
      setTimeout(() => {
        window.location.href = `/products/${productHandle}`;
      }, 1000);
      return;
    }

    console.log('Using variant ID:', variantId);

    // Add to cart using Shopify's AJAX API
    fetch('/cart/add.js', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        items: [{
          id: variantId,
          quantity: 1
        }]
      })
    })
      .then(response => response.json())
      .then(data => {
        if (data.status === 422) {
          alert('Error: ' + data.description);
        } else {
          // Success - update cart count and show success message
          updateCartCount();
          showSuccessMessage('Product added to cart!');

          // Close modal after short delay
          setTimeout(() => {
            closeQuickviewModal();
          }, 1500);
        }
      })
      .catch(error => {
        console.error('Error adding to cart:', error);
        alert('Error adding product to cart');
      });
  }

  // Get first available variant ID
  function getFirstAvailableVariant(productHandle) {
    console.log('Looking for variant ID for product:', productHandle);

    // Method 1: Try to get variant ID from data attributes
    const variantElement = document.querySelector(`[data-product-handle="${productHandle}"] [data-variant-id]`);
    if (variantElement) {
      const variantId = variantElement.getAttribute('data-variant-id');
      console.log('Found variant ID from data-product-handle:', variantId);
      return variantId;
    }

    // Method 2: Try to find variant ID in the product card
    const productCard = document.querySelector(`[href*="/products/${productHandle}"]`)?.closest('.card-wrapper, .product-item, .grid-product, .card');
    if (productCard) {
      // Look for variant ID in various attributes
      const variantId = productCard.querySelector('[data-variant-id]')?.getAttribute('data-variant-id') ||
        productCard.getAttribute('data-variant-id') ||
        productCard.querySelector('[data-product-id]')?.getAttribute('data-product-id');

      if (variantId) {
        console.log('Found variant ID from product card:', variantId);
        return variantId;
      }
    }

    // Method 3: Try to find variant ID from form elements
    const addToCartForm = document.querySelector(`form[action*="/cart/add"] input[name="id"]`);
    if (addToCartForm) {
      const variantId = addToCartForm.value;
      console.log('Found variant ID from form:', variantId);
      return variantId;
    }

    // Method 4: Try to find variant ID from any product-related element
    const allProductElements = document.querySelectorAll('[data-product-id], [data-variant-id], [data-product-handle]');
    for (const element of allProductElements) {
      if (element.getAttribute('data-product-handle') === productHandle) {
        const variantId = element.getAttribute('data-variant-id') || element.getAttribute('data-product-id');
        if (variantId) {
          console.log('Found variant ID from product element:', variantId);
          return variantId;
        }
      }
    }

    // Method 5: Try to extract from URL or other sources
    const productLink = document.querySelector(`a[href*="/products/${productHandle}"]`);
    if (productLink) {
      const parentElement = productLink.closest('[data-product-id], [data-variant-id]');
      if (parentElement) {
        const variantId = parentElement.getAttribute('data-variant-id') || parentElement.getAttribute('data-product-id');
        if (variantId) {
          console.log('Found variant ID from product link parent:', variantId);
          return variantId;
        }
      }
    }

    // Method 6: Try to find any variant ID on the page (last resort)
    const anyVariantId = document.querySelector('[data-variant-id]')?.getAttribute('data-variant-id');
    if (anyVariantId) {
      console.log('Found any variant ID on page (fallback):', anyVariantId);
      return anyVariantId;
    }

    // Method 7: Try to get variant ID from product page (if available)
    try {
      const productPageUrl = `/products/${productHandle}.js`;
      console.log('Trying to fetch variant ID from:', productPageUrl);

      // This is a synchronous approach - in production you might want to make this async
      // For now, we'll return a placeholder and let the user know
      console.log('No variant ID found on page, need to fetch from product page');
      return 'NEED_FETCH';
    } catch (error) {
      console.log('Error trying to fetch variant ID:', error);
    }

    console.log('No variant ID found for product:', productHandle);
    return null;
  }

  // Update cart count in header
  function updateCartCount() {
    // Try to find cart count element
    const cartCount = document.querySelector('.cart-count, .cart-count-bubble, [data-cart-count]');
    if (cartCount) {
      // Fetch current cart and update count
      fetch('/cart.js')
        .then(response => response.json())
        .then(cart => {
          const count = cart.item_count || 0;
          cartCount.textContent = count;
          cartCount.style.display = count > 0 ? 'block' : 'none';
        })
        .catch(error => {
          // Silently fail if cart update fails
        });
    }
  }

  // Show success message
  function showSuccessMessage(message) {
    // Remove existing message
    const existingMessage = document.querySelector('.quickview-success-message');
    if (existingMessage) {
      existingMessage.remove();
    }

    // Create success message
    const successMessage = document.createElement('div');
    successMessage.className = 'quickview-success-message';
    successMessage.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: #10b981;
      color: white;
      padding: 16px 24px;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      z-index: 1000000;
      font-family: inherit;
      font-size: 16px;
      font-weight: 500;
      animation: slideInRight 0.3s ease-out;
    `;
    successMessage.textContent = message;

    // Add animation styles
    if (!document.getElementById('quickview-animations')) {
      const style = document.createElement('style');
      style.id = 'quickview-animations';
      style.textContent = `
        @keyframes slideInRight {
          from { transform: translateX(100%); opacity: 0; }
          to { transform: translateX(0); opacity: 1; }
        }
        @keyframes slideOutRight {
          from { transform: translateX(0); opacity: 1; }
          to { transform: translateX(100%); opacity: 0; }
        }
      `;
      document.head.appendChild(style);
    }

    document.body.appendChild(successMessage);

    // Auto remove after 3 seconds
    setTimeout(() => {
      successMessage.style.animation = 'slideOutRight 0.3s ease-in';
      setTimeout(() => {
        if (successMessage.parentNode) {
          successMessage.remove();
        }
      }, 300);
    }, 3000);
  }

</script>

<script>
  // Quickview App Extension - Embedded Code
  (function() {
    'use strict';

    // Check if quickview is already loaded
    const rawConfig = {{ shop.metafields.quickview.product_config | json }};
    let config;

    try {
      config = JSON.parse(rawConfig);
    } catch (e) {
      console.error("‚ùå Failed to parse product_config metafield JSON:", e);
      config = {};
    }


    if (window.QuickviewLoaded) return;
    window.QuickviewLoaded = true;

    // Quickview Configuration with more dynamic options
    let quickviewConfig = {
      enabled: config.enabled,
      buttonText: config.buttonText || 'Quick View',
      show: {
        price: config.show.price || true,
        button: config.show.button || true,
        description: config.show.description || true,
        variant: config.show.variant || true,
        image: config.show.image || true,
        title: config.show.title || true,
        availability: config.show.availability || true,
      },
      styling: {
        theme: config.styling.theme || 'light',
        animation: config.styling.animation || 'fade',
        overlay: config.styling.overlay || true,
        closeOnOverlayClick: config.styling.closeOnOverlayClick || true,
        buttonColor: '#007bff',
        buttonHoverColor: '#0056b3',
        modalWidth: '500px',
        modalMaxHeight: '80vh',
        borderRadius: '8px',
        shadow: '0 10px 25px rgba(0, 0, 0, 0.2)',
        closeButtonColor: '#333',
        closeButtonHoverBg: 'rgba(0, 0, 0, 0.1)',
        titleColor: '#333',
        priceColor: '#10b981',
        descriptionColor: '#6b7280',
        addToCartButtonColor: '#dc3545',
        addToCartButtonHoverColor: '#c82333',
        viewProductButtonColor: '#10b981',
        viewProductButtonHoverColor: '#059669'
      },
      triggers: {
        button: true,
      },
      content: {
        maxDescriptionLength: 150,
        showAddToCart: true,
        showViewProduct: true,
        showAvailability: true,
        showPrice: true,
        showImage: true,
        showTitle: true,
        showDescription: true
      }
    };

    // Create quickview button
    function createQuickviewButton(productElement, productData) {
      if (!quickviewConfig.enabled || !quickviewConfig.triggers.button) {
        return;
      }

      // Check if button already exists
      if (productElement.querySelector('.quickview-button')) {
        return;
      }

      const button = document.createElement('button');
      button.className = 'quickview-button';
      button.textContent = quickviewConfig.buttonText;
      button.style.cssText = `
        background: ${quickviewConfig.styling.buttonColor};
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
        font-weight: 500;
        margin-top: 8px;
        width: 100%;
        transition: background-color 0.2s ease;
        font-family: inherit;
      `;

      button.addEventListener('mouseenter', () => {
        button.style.background = quickviewConfig.styling.buttonHoverColor;
      });

      button.addEventListener('mouseleave', () => {
        button.style.background = quickviewConfig.styling.buttonColor;
      });

      button.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        openQuickviewModal(productData);
      });

      return button;
    }

    // Create and show quickview modal
    function openQuickviewModal(productData) {
      if (!productData) return;

      // Close existing modal if any
      closeQuickviewModal();

      const currentTheme = quickviewConfig.styling?.theme || 'light';
      const animation = quickviewConfig.styling?.animation || 'fade';
      const showOverlay = quickviewConfig.styling?.overlay !== false;

      // Create modal container
      const modal = document.createElement('div');
      modal.className = 'quickview-modal';
      modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        z-index: 999999;
        display: flex;
        align-items: center;
        justify-content: center;
        ${showOverlay ? 'background-color: rgba(0, 0, 0, 0.5);' : ''}
      `;

      // Create modal content
      const content = document.createElement('div');
      content.style.cssText = `
        background: ${currentTheme === 'dark' ? '#1f2937' : 'white'};
        color: ${currentTheme === 'dark' ? 'white' : '#333'};
        border-radius: ${quickviewConfig.styling.borderRadius};
        padding: 24px;
        max-width: ${quickviewConfig.styling.modalWidth};
        max-height: ${quickviewConfig.styling.modalMaxHeight};
        overflow: auto;
        box-shadow: ${quickviewConfig.styling.shadow};
        position: relative;
        animation: ${animation} 0.3s ease-in-out;
        font-family: inherit;
      `;

      // Create close button
      const closeButton = document.createElement('button');
      closeButton.innerHTML = '√ó';
      closeButton.style.cssText = `
        position: absolute;
        top: 12px;
        right: 12px;
        background: none;
        border: none;
        font-size: 24px;
        cursor: pointer;
        color: ${quickviewConfig.styling.closeButtonColor};
        width: 30px;
        height: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        transition: background-color 0.2s ease;
      `;

      closeButton.addEventListener('mouseenter', () => {
        closeButton.style.background = quickviewConfig.styling.closeButtonHoverBg;
      });

      closeButton.addEventListener('mouseleave', () => {
        closeButton.style.background = 'transparent';
      });

      closeButton.addEventListener('click', () => {
        closeQuickviewModal();
      });

      // Create product content
      let productContent = '';

      if (quickviewConfig.content.showTitle && productData.title) {
        productContent += `<h3 style="margin: 0 0 16px 0; font-size: 20px; font-weight: 600; color: ${quickviewConfig.styling.titleColor}; font-family: inherit;">${productData.title}</h3>`;
      }

      if (quickviewConfig.content.showImage && productData.featured_image) {
        productContent += `
          <div style="margin-bottom: 16px; text-align: center;">
            <img src="${productData.featured_image}" alt="${productData.title}" style="max-width: 100%; max-height: 200px; border-radius: 4px; object-fit: cover;">
          </div>
        `;
      }

      if (quickviewConfig.content.showPrice && productData.price) {
        productContent += `<div style="margin-bottom: 16px; font-size: 18px; font-weight: 600; color: ${quickviewConfig.styling.priceColor}; font-family: inherit;">${productData.price}</div>`;
      }

      if (quickviewConfig.content.showDescription && productData.description) {
        const description = productData.description.length > quickviewConfig.content.maxDescriptionLength
          ? `${productData.description.substring(0, quickviewConfig.content.maxDescriptionLength)}...`
          : productData.description;
        productContent += `<div style="margin-bottom: 16px; font-size: 14px; line-height: 1.5; color: ${quickviewConfig.styling.descriptionColor}; font-family: inherit;">${description}</div>`;
      }
      console.log(productData);
      if (quickviewConfig.content.showAvailability) {
        const availability = productData.available ? '‚úÖ In Stock' : '‚ùå Out of Stock';
        const color = productData.available ? '#10b981' : '#ef4444';
        productContent += `<div style="margin-bottom: 16px; font-size: 14px; color: ${color}; font-family: inherit;">${availability}</div>`;
      }

      if (quickviewConfig.content.showAddToCart) {
        productContent += `
          <div style="text-align: center; margin-bottom: 16px;">
            <button id="quickview-add-to-cart-${Date.now()}" class="quickview-add-to-cart" data-product-handle="${productData.handle}" style="
              background: ${quickviewConfig.styling.addToCartButtonColor};
              color: white;
              border: none;
              padding: 12px 24px;
              border-radius: 6px;
              cursor: pointer;
              font-size: 16px;
              font-weight: 500;
              width: 100%;
              font-family: inherit;
              transition: background-color 0.2s ease;
              margin-bottom: 8px;
            " onmouseover="this.style.background='${quickviewConfig.styling.addToCartButtonHoverColor}'" onmouseout="this.style.background='${quickviewConfig.styling.addToCartButtonColor}'">Add to Cart</button>
          </div>
          <div style="text-align: center;">
            <button onclick="window.location.href='/products/${productData.handle}'" style="
              background: ${quickviewConfig.styling.viewProductButtonColor};
              color: white;
              border: none;
              padding: 12px 24px;
              border-radius: 6px;
              cursor: pointer;
              font-size: 16px;
              font-weight: 500;
              width: 100%;
              font-family: inherit;
              transition: background-color 0.2s ease;
            " onmouseover="this.style.background='${quickviewConfig.styling.viewProductButtonHoverColor}'" onmouseout="this.style.background='${quickviewConfig.styling.viewProductButtonColor}'">View Full Product</button>
          </div>
        `;
      }

      content.innerHTML = productContent;
      content.appendChild(closeButton);

      // Add event listeners for add to cart buttons
      const addToCartButton = content.querySelector('.quickview-add-to-cart');
      if (addToCartButton) {
        addToCartButton.addEventListener('click', function(e) {
          e.preventDefault();
          e.stopPropagation();
          const productHandle = this.getAttribute('data-product-handle');
          if (productHandle) {
            addToCart(productHandle);
          }
        });
      }

      // Add click handler to close on overlay click
      if (quickviewConfig.styling?.closeOnOverlayClick) {
        modal.addEventListener('click', (e) => {
          if (e.target === modal) {
            closeQuickviewModal();
          }
        });
      }

      // Add escape key handler
      document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
          closeQuickviewModal();
        }
      });

      modal.appendChild(content);
      document.body.appendChild(modal);

      // Prevent body scroll
      document.body.style.overflow = 'hidden';
    }

    // Extract product data from DOM element
    function extractProductData(element) {
      try {
        // Try to get data from data attributes
        const productId = element.getAttribute('data-product-id') ||
          element.querySelector('[data-product-id]')?.getAttribute('data-product-id');

        const title = element.querySelector('.product-title, .grid-product__title, .product__title, h3, h4, .product-name')?.textContent?.trim();
        const price = element.querySelector('.product-price, .grid-product__price, .price, .product__price')?.textContent?.trim();
        const image = element.querySelector('img')?.src;
        const handle = element.querySelector('a[href*="/products/"]')?.href?.split('/products/')[1]?.split('?')[0];

        // Try to get description from meta or data
        const description = element.getAttribute('data-product-description') ||
          element.querySelector('.product-description, .product__description')?.textContent?.trim() || '';

        // Check availability (you might need to adjust this based on your theme)
        const available = !element.querySelector('.sold-out, .unavailable, [data-available="false"], .product__sold-out');

        if (productId || title) {
          return {
            id: productId,
            title: title,
            price: price,
            featured_image: image,
            handle: handle,
            description: description,
            available: available
          };
        }
      } catch (error) {
        console.log('Error extracting product data:', error);
      }

      return null;
    }

    // Initialize quickview on page
    function initQuickview() {
      // Find all product elements on the page
      const productElements = document.querySelectorAll('.product-item, .grid-product, .product-card, .product, [data-product-id], .product__item, .grid__item, .card-wrapper');

      productElements.forEach((element, index) => {
        // Extract product data from the element
        const productData = extractProductData(element);

        if (productData) {
          // Find the best location to insert the quickview button
          let buttonContainer = null;

          // Try to find card__content first
          buttonContainer = element.querySelector('.card__content');

          // If not found, try other common selectors
          if (!buttonContainer) {
            buttonContainer = element.querySelector('.card__information, .product-actions, .product-footer, .product__buttons, .product__actions, .card-information');
          }

          // If still not found, use the element itself
          if (!buttonContainer) {
            buttonContainer = element;
          }

          // Create and insert quickview button
          const quickviewButton = createQuickviewButton(element, productData);
          if (quickviewButton) {
            // Insert button at the end of the container
            buttonContainer.appendChild(quickviewButton);

            // Force button to be visible
            quickviewButton.style.cssText += `
              display: block !important;
              visibility: visible !important;
              opacity: 1 !important;
              position: relative !important;
              margin: 8px 0 !important;
              clear: both !important;
              z-index: 100 !important;
            `;
          }
        }
      });
    }

    // Make initQuickview globally accessible
    window.initQuickview = initQuickview;

    // Add CSS animations
    function addQuickviewStyles() {
      if (document.getElementById('quickview-styles')) return; // Already added

      const style = document.createElement('style');
      style.id = 'quickview-styles';
      style.textContent = `
        @keyframes fade {
          from { opacity: 0; transform: scale(0.9); }
          to { opacity: 1; transform: scale(1); }
        }

        @keyframes slide {
          from { opacity: 0; transform: translateY(20px); }
          to { opacity: 1; transform: translateY(0); }
        }

        @keyframes zoom {
          from { opacity: 0; transform: scale(0.8); }
          to { opacity: 1; transform: scale(1); }
        }

        .quickview-button:hover {
          background-color: ${quickviewConfig.styling.buttonHoverColor} !important;
        }

        .quickview-modal {
          font-family: inherit;
        }
      `;
      document.head.appendChild(style);
    }

    // Initialize when DOM is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', function() {
        addQuickviewStyles();
        initQuickview();
      });
    } else {
      addQuickviewStyles();
      initQuickview();
    }

    // Reload configuration when page becomes visible (user returns from admin app)
    document.addEventListener('visibilitychange', function() {
      if (!document.hidden) {
        console.log('Page became visible, reloading configuration...');
      }
    });

    // Also reload configuration when window gains focus
    window.addEventListener('focus', function() {
      console.log('Window gained focus, reloading configuration...');
    });

    // Re-initialize when page content changes (for AJAX navigation)
    if (typeof window !== 'undefined') {
      window.addEventListener('popstate', () => {
        setTimeout(() => {
          initQuickview();
        }, 100);
      });

      // For themes that use AJAX navigation
      const observer = new MutationObserver(function(mutations) {
        mutations.forEach(function(mutation) {
          if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
            // Check if new products were added
            const newProducts = Array.from(mutation.addedNodes).some(node =>
                node.nodeType === 1 && (
                  node.classList?.contains('product-item') ||
                  node.classList?.contains('grid-product') ||
                  node.classList?.contains('product-card') ||
                  node.classList?.contains('product') ||
                  node.classList?.contains('product__item') ||
                  node.classList?.contains('grid__item')
                )
            );

            if (newProducts) {
              setTimeout(initQuickview, 100);
            }
          }
        });
      });

      observer.observe(document.body, {
        childList: true,
        subtree: true
      });
    }

    // Make functions globally available for debugging
    window.QuickviewDebug = {
      init: initQuickview,
      config: () => quickviewConfig,
      openModal: openQuickviewModal,
      closeModal: closeQuickviewModal,
      addToCart: addToCart,
      updateCartCount: updateCartCount,
      showSuccessMessage: showSuccessMessage,
    };
  })();
</script>

<!-- Quickview CSS -->
<style>
  .quickview-button {
    background: ${quickviewConfig.styling.buttonColor} !important;
    color: white !important;
    border: none !important;
    padding: 8px 16px !important;
    border-radius: 4px !important;
    cursor: pointer !important;
    font-size: 14px !important;
    font-weight: 500 !important;
    margin-top: 8px !important;
    width: 100% !important;
    transition: background-color 0.2s ease !important;
    font-family: inherit !important;
    text-decoration: none !important;
    display: block !important;
    text-align: center !important;
    line-height: 1.2 !important;
    position: relative !important;
    z-index: 10 !important;
    visibility: visible !important;
    opacity: 1 !important;
    max-width: none !important;
    min-height: auto !important;
    box-sizing: border-box !important;
    overflow: visible !important;
    clip: auto !important;
    -webkit-appearance: none !important;
    -moz-appearance: none !important;
    appearance: none !important;
  }

  .quickview-button:hover {
    background: ${quickviewConfig.styling.buttonHoverColor} !important;
    text-decoration: none !important;
    transform: translateY(-1px) !important;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2) !important;
  }

  .quickview-button:focus {
    outline: 2px solid ${quickviewConfig.styling.buttonColor} !important;
    outline-offset: 2px !important;
    background: ${quickviewConfig.styling.buttonHoverColor} !important;
  }

  .quickview-button:active {
    transform: translateY(0) !important;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2) !important;
  }

  /* Force button to be visible */
  .quickview-button,
  .quickview-button * {
    display: block !important;
    visibility: visible !important;
    opacity: 1 !important;
    position: static !important;
    float: none !important;
    clear: none !important;
  }

  /* Override any theme hiding */
  .card__content .quickview-button,
  .card__information .quickview-button,
  .card-information .quickview-button {
    display: block !important;
    visibility: visible !important;
    opacity: 1 !important;
    position: relative !important;
    margin: 8px 0 !important;
    clear: both !important;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .quickview-button {
      padding: 10px 16px !important;
      font-size: 16px !important;
      margin: 10px 0 !important;
    }
  }

  /* Debug styles - remove after testing */
  .quickview-button::before {
    content: "üîç " !important;
    margin-right: 5px !important;
  }

  /* Ensure button container is visible */
  .card__content,
  .card__information,
  .card-information {
    position: relative !important;
    overflow: visible !important;
  }
</style>
